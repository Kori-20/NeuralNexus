//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""d1bcf7de-00e6-4a4b-83bd-d54d4905ae66"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""299bc327-a90a-41af-a9e7-ed337ca368f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""cf5cb42d-74e0-461f-b9ea-47a1028c2291"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""b5cfe62a-34d5-4601-b523-6d7cbf51f19d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""a62bb6b9-d68d-460f-bb16-9edc7bbe934a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToLeftCover"",
                    ""type"": ""Button"",
                    ""id"": ""f8a14cb8-cf50-48e3-b2c1-c12331ca22f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToRightCover"",
                    ""type"": ""Button"",
                    ""id"": ""e46d9ea0-a760-4428-bf8b-fa6cadb6d678"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""a977b22b-a1e8-4c27-92f9-b27582f376e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QAbility"",
                    ""type"": ""Button"",
                    ""id"": ""757847c5-6175-4421-bc92-90f185192c4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WAbility"",
                    ""type"": ""Button"",
                    ""id"": ""9f5a697e-2ac8-493d-9f6c-acf5de46a71e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EAbility"",
                    ""type"": ""Button"",
                    ""id"": ""df1292d1-7ca0-4a86-9657-0bc1492e15b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""8f3928e4-bdcc-498c-9eae-d7694b7c006b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""db78324b-5162-4f3b-b4b5-4bafea8c67fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f622e6f7-44d7-4031-a01e-e82ce4209d9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05639ee8-3fd1-4b80-bc20-fc2136104834"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ea1f574-a9af-4f43-baf8-8126a3e7cdb2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91aee523-e6a2-4ad1-a65a-8eb647a0b782"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0734eaf2-3d9f-4a91-b3d8-d7ef2a10ab97"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""467ba19f-be44-4402-8a5c-14fee1fee968"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToLeftCover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58a0efdd-2cd7-472c-805f-d01bb1f420ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToRightCover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56887bdb-8033-46ec-bd33-45499c939915"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bf12076-f9d9-42b6-8ef6-0c9628f9ff53"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e98c8d08-d041-4381-a3b4-6c4f93c50ba3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""907130a7-61c9-47c8-bcd8-01ef397193c2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d96cd35e-7a74-4539-80a8-de1db196d176"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e58bff5-10cb-4f45-8dab-687bcf010096"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0a02c4a-0a47-44ff-8a1f-f6b1a3672a69"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Shoot = m_Game.FindAction("Shoot", throwIfNotFound: true);
        m_Game_SwitchWeapon1 = m_Game.FindAction("SwitchWeapon1", throwIfNotFound: true);
        m_Game_SwitchWeapon2 = m_Game.FindAction("SwitchWeapon2", throwIfNotFound: true);
        m_Game_SwitchWeapon3 = m_Game.FindAction("SwitchWeapon3", throwIfNotFound: true);
        m_Game_GoToLeftCover = m_Game.FindAction("GoToLeftCover", throwIfNotFound: true);
        m_Game_GoToRightCover = m_Game.FindAction("GoToRightCover", throwIfNotFound: true);
        m_Game_Reload = m_Game.FindAction("Reload", throwIfNotFound: true);
        m_Game_QAbility = m_Game.FindAction("QAbility", throwIfNotFound: true);
        m_Game_WAbility = m_Game.FindAction("WAbility", throwIfNotFound: true);
        m_Game_EAbility = m_Game.FindAction("EAbility", throwIfNotFound: true);
        m_Game_ADS = m_Game.FindAction("ADS", throwIfNotFound: true);
        m_Game_Exit = m_Game.FindAction("Exit", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Shoot;
    private readonly InputAction m_Game_SwitchWeapon1;
    private readonly InputAction m_Game_SwitchWeapon2;
    private readonly InputAction m_Game_SwitchWeapon3;
    private readonly InputAction m_Game_GoToLeftCover;
    private readonly InputAction m_Game_GoToRightCover;
    private readonly InputAction m_Game_Reload;
    private readonly InputAction m_Game_QAbility;
    private readonly InputAction m_Game_WAbility;
    private readonly InputAction m_Game_EAbility;
    private readonly InputAction m_Game_ADS;
    private readonly InputAction m_Game_Exit;
    private readonly InputAction m_Game_Pause;
    public struct GameActions
    {
        private @GameInput m_Wrapper;
        public GameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Game_Shoot;
        public InputAction @SwitchWeapon1 => m_Wrapper.m_Game_SwitchWeapon1;
        public InputAction @SwitchWeapon2 => m_Wrapper.m_Game_SwitchWeapon2;
        public InputAction @SwitchWeapon3 => m_Wrapper.m_Game_SwitchWeapon3;
        public InputAction @GoToLeftCover => m_Wrapper.m_Game_GoToLeftCover;
        public InputAction @GoToRightCover => m_Wrapper.m_Game_GoToRightCover;
        public InputAction @Reload => m_Wrapper.m_Game_Reload;
        public InputAction @QAbility => m_Wrapper.m_Game_QAbility;
        public InputAction @WAbility => m_Wrapper.m_Game_WAbility;
        public InputAction @EAbility => m_Wrapper.m_Game_EAbility;
        public InputAction @ADS => m_Wrapper.m_Game_ADS;
        public InputAction @Exit => m_Wrapper.m_Game_Exit;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @SwitchWeapon1.started += instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed += instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled += instance.OnSwitchWeapon1;
            @SwitchWeapon2.started += instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed += instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled += instance.OnSwitchWeapon2;
            @SwitchWeapon3.started += instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed += instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled += instance.OnSwitchWeapon3;
            @GoToLeftCover.started += instance.OnGoToLeftCover;
            @GoToLeftCover.performed += instance.OnGoToLeftCover;
            @GoToLeftCover.canceled += instance.OnGoToLeftCover;
            @GoToRightCover.started += instance.OnGoToRightCover;
            @GoToRightCover.performed += instance.OnGoToRightCover;
            @GoToRightCover.canceled += instance.OnGoToRightCover;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @QAbility.started += instance.OnQAbility;
            @QAbility.performed += instance.OnQAbility;
            @QAbility.canceled += instance.OnQAbility;
            @WAbility.started += instance.OnWAbility;
            @WAbility.performed += instance.OnWAbility;
            @WAbility.canceled += instance.OnWAbility;
            @EAbility.started += instance.OnEAbility;
            @EAbility.performed += instance.OnEAbility;
            @EAbility.canceled += instance.OnEAbility;
            @ADS.started += instance.OnADS;
            @ADS.performed += instance.OnADS;
            @ADS.canceled += instance.OnADS;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @SwitchWeapon1.started -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled -= instance.OnSwitchWeapon1;
            @SwitchWeapon2.started -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled -= instance.OnSwitchWeapon2;
            @SwitchWeapon3.started -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled -= instance.OnSwitchWeapon3;
            @GoToLeftCover.started -= instance.OnGoToLeftCover;
            @GoToLeftCover.performed -= instance.OnGoToLeftCover;
            @GoToLeftCover.canceled -= instance.OnGoToLeftCover;
            @GoToRightCover.started -= instance.OnGoToRightCover;
            @GoToRightCover.performed -= instance.OnGoToRightCover;
            @GoToRightCover.canceled -= instance.OnGoToRightCover;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @QAbility.started -= instance.OnQAbility;
            @QAbility.performed -= instance.OnQAbility;
            @QAbility.canceled -= instance.OnQAbility;
            @WAbility.started -= instance.OnWAbility;
            @WAbility.performed -= instance.OnWAbility;
            @WAbility.canceled -= instance.OnWAbility;
            @EAbility.started -= instance.OnEAbility;
            @EAbility.performed -= instance.OnEAbility;
            @EAbility.canceled -= instance.OnEAbility;
            @ADS.started -= instance.OnADS;
            @ADS.performed -= instance.OnADS;
            @ADS.canceled -= instance.OnADS;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchWeapon1(InputAction.CallbackContext context);
        void OnSwitchWeapon2(InputAction.CallbackContext context);
        void OnSwitchWeapon3(InputAction.CallbackContext context);
        void OnGoToLeftCover(InputAction.CallbackContext context);
        void OnGoToRightCover(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnQAbility(InputAction.CallbackContext context);
        void OnWAbility(InputAction.CallbackContext context);
        void OnEAbility(InputAction.CallbackContext context);
        void OnADS(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
